<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spacebeam (Posts about guide)</title><link>https://spacebeam.org/</link><description></description><atom:link href="https://spacebeam.org/categories/guide.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>&lt;center&gt;© 2023 &lt;a href="mailto:info@spacebeam.org"&gt;The Spacebeam authors&lt;/a&gt; &lt;/center&gt;</copyright><lastBuildDate>Tue, 30 May 2023 16:34:44 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>It's a UNIX system!</title><link>https://spacebeam.org/posts/its-a-unix-system/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;h2&gt;my system&lt;/h2&gt;
&lt;p&gt;I'm going to go through my customized dev environment and linux workflow (?),&lt;/p&gt;
&lt;p&gt;this is mostly for starcraft brood war ofc born of necessity. &lt;/p&gt;
&lt;p&gt;I use vim but I expect autocomplete and go to definitions and a tool that let me move throuth my projet easy and quick&lt;/p&gt;
&lt;p&gt;is a great text editor available everywhere that let me customize it to my own needs&lt;/p&gt;
&lt;p&gt;I'm by no means a vim expert, this is more like my notes in the continuous process of learning and making my own customized experience.&lt;/p&gt;
&lt;p&gt;vim window movements suck by default, I need good movements (explain what does this means).&lt;/p&gt;
&lt;p&gt;my goals are built-in language support for Python, Lua, Erlang and C &lt;/p&gt;
&lt;p&gt;avoid the requirement of tools outside those supported languages,&lt;/p&gt;
&lt;p&gt;avoid rust or go utilities if possible,&lt;/p&gt;
&lt;p&gt;avoid c++ if possible,&lt;/p&gt;
&lt;p&gt;introduce debian linux&lt;/p&gt;
&lt;p&gt;kek&lt;/p&gt;
&lt;p&gt;introduce the starcraft and vim comparation..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vim plugging manager&lt;/li&gt;
&lt;li&gt;my list of pluggins&lt;/li&gt;
&lt;li&gt;autocompletion&lt;/li&gt;
&lt;li&gt;unit tests&lt;/li&gt;
&lt;li&gt;git integration&lt;/li&gt;
&lt;li&gt;startify menu (?)&lt;/li&gt;
&lt;li&gt;go to definition&lt;/li&gt;
&lt;li&gt;linting (?)&lt;/li&gt;
&lt;li&gt;denite (more than just a fuzzy finder!)&lt;/li&gt;
&lt;li&gt;undotree F5&lt;/li&gt;
&lt;li&gt;dirvish (file finder)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hotkeys&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mksh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;kitty&lt;/li&gt;
&lt;li&gt;bspwm&lt;/li&gt;
&lt;li&gt;tmux&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;direction is more important than speed&lt;/p&gt;
&lt;h2&gt;plug&lt;/h2&gt;
&lt;p&gt;plug vim pluging manager&lt;/p&gt;
&lt;h3&gt;my list of pluggins&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;pluggin&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;vim-sensible&lt;/td&gt;
&lt;td&gt;a universal set of defaults that everyone can agree on.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-eunuch&lt;/td&gt;
&lt;td&gt;Vim sugar for the UNIX shell commands that need it the most.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-fugitive&lt;/td&gt;
&lt;td&gt;It's so awesome, it should be illegal.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-unimpaired&lt;/td&gt;
&lt;td&gt;Complementary pairs of mappings.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-repeat&lt;/td&gt;
&lt;td&gt;Repeat.vim remaps . in a way that plugins can tap into it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-dispatch&lt;/td&gt;
&lt;td&gt;Kick off builds and test suites using one of several asynchronous adapters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-startify&lt;/td&gt;
&lt;td&gt;A fancy start screen for Vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-signify&lt;/td&gt;
&lt;td&gt;Show differences with style&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-polyglot&lt;/td&gt;
&lt;td&gt;A solid language pack for Vim.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-maximizer&lt;/td&gt;
&lt;td&gt;Maximizes and restores the current window in Vim.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-bbye&lt;/td&gt;
&lt;td&gt;Close and remove the buffer.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-lastplace&lt;/td&gt;
&lt;td&gt;Intelligently reopen files at your last edit position.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-sandwich&lt;/td&gt;
&lt;td&gt;add/delete/replace surroundings of a sandwiched textobject&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-highlightedyank&lt;/td&gt;
&lt;td&gt;Make the yanked region apparent!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;goyo&lt;/td&gt;
&lt;td&gt;Distraction-free writing in Vim.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;limelight&lt;/td&gt;
&lt;td&gt;Hyperfocus-writing in Vim.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-peekaboo&lt;/td&gt;
&lt;td&gt;see the contents of the registers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-easy-align&lt;/td&gt;
&lt;td&gt;A simple, easy-to-use Vim alignment plugin.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gv.vim&lt;/td&gt;
&lt;td&gt;A git commit browser in Vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-slash&lt;/td&gt;
&lt;td&gt;Enhancing in-buffer search experience&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Vim-Jinja2-Syntax&lt;/td&gt;
&lt;td&gt;An up-to-date jinja2 syntax file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;denite&lt;/td&gt;
&lt;td&gt;Denite is a dark powered plugin to unite all interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-dirvish&lt;/td&gt;
&lt;td&gt;Directory viewer for Vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-dirvish-git&lt;/td&gt;
&lt;td&gt;Plugin for dirvish.vim that shows git status flags&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-gtfo&lt;/td&gt;
&lt;td&gt;Go to Terminal or File manager&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-love-docs&lt;/td&gt;
&lt;td&gt;Vim plugin for LÖVE syntax highlighting and help file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-pandoc&lt;/td&gt;
&lt;td&gt;pandoc integration and utilities for vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-pandoc-syntax&lt;/td&gt;
&lt;td&gt;pandoc markdown syntax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;graphviz.vim&lt;/td&gt;
&lt;td&gt;graphviz .dot to .png flow chart image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-sxhkdrc&lt;/td&gt;
&lt;td&gt;Vim syntax for sxhkd's configuration files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jupytext.vim&lt;/td&gt;
&lt;td&gt;editing Jupyter ipynb files via jupytext&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tmux-complete.vim&lt;/td&gt;
&lt;td&gt;insert mode completion of words in adjacent tmux panes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-tmux-navigator&lt;/td&gt;
&lt;td&gt;Seamless navigation between tmux panes and vim splits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-table-mode&lt;/td&gt;
&lt;td&gt;VIM Table Mode for instant table creation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;auto-pairs&lt;/td&gt;
&lt;td&gt;Vim plugin, insert or delete brackets, parens, quotes in pair&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undotree&lt;/td&gt;
&lt;td&gt;The undo history visualizer for VIM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;onehalf&lt;/td&gt;
&lt;td&gt;one half dark&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rainbow&lt;/td&gt;
&lt;td&gt;Rainbow Parentheses Improved&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VimCompletesMe&lt;/td&gt;
&lt;td&gt;You don't Complete Me; Vim Completes Me!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deoplete&lt;/td&gt;
&lt;td&gt;Dark powered asynchronous completion framework for Vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;neoinclude&lt;/td&gt;
&lt;td&gt;Include completion framework for deoplete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deoplete-clangx&lt;/td&gt;
&lt;td&gt;C/C++ Completion for deoplete using clang&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nvim-yarp&lt;/td&gt;
&lt;td&gt;Yet Another Remote Plugin Framework&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-hug-neovim-rpc&lt;/td&gt;
&lt;td&gt;Compatibility layer for neovim rpc client working on vim8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deoplete-vim-lsp&lt;/td&gt;
&lt;td&gt;deoplete source for vim-lsp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-cmake&lt;/td&gt;
&lt;td&gt;plugin for working with CMake projects&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-gutentags&lt;/td&gt;
&lt;td&gt;A Vim plugin that manages your tag files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tagbar&lt;/td&gt;
&lt;td&gt;displays tags in a window, ordered by scope&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;async.vim&lt;/td&gt;
&lt;td&gt;normalize async job control api for vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-lsp&lt;/td&gt;
&lt;td&gt;async language server protocol plugin for vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ale&lt;/td&gt;
&lt;td&gt;Check syntax in Vim asynchronously and fix files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-lsp-ale&lt;/td&gt;
&lt;td&gt;Bridge between vim-lsp and ALE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;neoformat&lt;/td&gt;
&lt;td&gt;A vim plugin for formatting code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-devicons&lt;/td&gt;
&lt;td&gt;Adds file type icons to Vim plugins&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lightline.vim&lt;/td&gt;
&lt;td&gt;A light and configurable statusline/tabline plugin for Vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-cursorworld&lt;/td&gt;
&lt;td&gt;Underlines the word under the cursor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lightline-bufferline&lt;/td&gt;
&lt;td&gt;bufferline functionality for the lightline vim plugin.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lightline-ale&lt;/td&gt;
&lt;td&gt;ALE indicator for the lightline vim plugin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vimwiki&lt;/td&gt;
&lt;td&gt;Personal Wiki for Vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;calendar-vim&lt;/td&gt;
&lt;td&gt;Creates a calendar you can use within vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pomodoro.vim&lt;/td&gt;
&lt;td&gt;Bring the beauty of the Pomodoro technique to Vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Colorizer&lt;/td&gt;
&lt;td&gt;Color hex codes and color names&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indentLine&lt;/td&gt;
&lt;td&gt;display the indention levels with thin vertical lines&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-test&lt;/td&gt;
&lt;td&gt;Run your tests at the speed of thought&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-isort&lt;/td&gt;
&lt;td&gt;sort python imports using isort&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-minimap&lt;/td&gt;
&lt;td&gt;A minimap for vim&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim-lsp-settings&lt;/td&gt;
&lt;td&gt;Auto configurations for Language Server for vim-lsp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;custom preferences&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;plugin&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ale.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;calendar.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;denite.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;deoplete.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dirvish.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;goyo.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gutentags.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hotkets.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indentLine.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jupytext.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ligthline.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsp.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;neoformat.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pandoc.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;startify.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tmux.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vimwiki.vim&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;autocompletion&lt;/h2&gt;
&lt;p&gt;blabla bla&lt;/p&gt;
&lt;h2&gt;linting&lt;/h2&gt;
&lt;p&gt;ale.vim&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python support flake8 and pylint&lt;/li&gt;
&lt;li&gt;lua support luacheck&lt;/li&gt;
&lt;li&gt;c support by clang&lt;/li&gt;
&lt;li&gt;erlang support with syntaxerl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;hotkeys&lt;/h2&gt;
&lt;p&gt;hotkeys.vim&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;hotkey&lt;/th&gt;
&lt;th&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;leader ]&lt;/td&gt;
&lt;td&gt;ale next wrap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader [&lt;/td&gt;
&lt;td&gt;ale previous wrap&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader -&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader \&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader t&lt;/td&gt;
&lt;td&gt;bla&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader tc&lt;/td&gt;
&lt;td&gt;color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader s&lt;/td&gt;
&lt;td&gt;update&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader z&lt;/td&gt;
&lt;td&gt;spelling&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader x&lt;/td&gt;
&lt;td&gt;buffer delete Bdelete&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader e&lt;/td&gt;
&lt;td&gt;exit qa!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader d&lt;/td&gt;
&lt;td&gt;Denite buffer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader f&lt;/td&gt;
&lt;td&gt;DeniteProjectDir -start-filter grep:::!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader Backspace&lt;/td&gt;
&lt;td&gt;Denite -resume -cursor-pos=+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;leader gy&lt;/td&gt;
&lt;td&gt;Goyo&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;leader R, replace&lt;/p&gt;
&lt;p&gt;leader gg, bla
leader gj, bla
leader gf, bla
leader ga, git fetch
leader gl, git pull
leader gc, git commit
leader gp, git push&lt;/p&gt;
&lt;p&gt;leader cg, CMakeGenerate
leader cb, CMakeBuild&lt;/p&gt;
&lt;p&gt;leader ct, CMakeBuild test&lt;/p&gt;
&lt;p&gt;leader tn, TestNearest&lt;/p&gt;
&lt;p&gt;leader tf, TestFile&lt;/p&gt;
&lt;p&gt;leader ts, TestSuite -strategy=vimterminal&lt;/p&gt;
&lt;p&gt;leader tl, TestLast&lt;/p&gt;
&lt;p&gt;I'm also have qe, j, k, qw, qq maped for quickfix stuff (?)&lt;/p&gt;
&lt;p&gt;leader qe,&lt;/p&gt;
&lt;p&gt;leader j,&lt;/p&gt;
&lt;p&gt;leader k,&lt;/p&gt;
&lt;p&gt;leader qw,&lt;/p&gt;
&lt;p&gt;leader qq&lt;/p&gt;
&lt;p&gt;now the F keys&lt;/p&gt;
&lt;p&gt;f1, help
f2, maximizer
f3, dirvish
f4, denite
f5, undotree
f5, date on insert mode
f7, calendar.vim
f8, pomodoro.vim&lt;/p&gt;</description><category>computer</category><category>guide</category><category>hypermodernism</category><category>nonsense</category><guid>https://spacebeam.org/posts/its-a-unix-system/</guid><pubDate>Tue, 30 Aug 2022 17:34:34 GMT</pubDate></item><item><title>Chrysalis anti-spam discord bot</title><link>https://spacebeam.org/posts/chrysalis-anti-spam-discord-bot/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;Write your post here.&lt;/p&gt;</description><category>guide</category><guid>https://spacebeam.org/posts/chrysalis-anti-spam-discord-bot/</guid><pubDate>Wed, 03 Aug 2022 14:04:36 GMT</pubDate></item><item><title>School for Zergs</title><link>https://spacebeam.org/posts/school-for-zergs/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;This project is a paid project, where people contribute money to fund for korean zerg guides being translated.&lt;/p&gt;
&lt;p&gt;help us fund future videos!&lt;/p&gt;</description><category>guide</category><category>zergs</category><guid>https://spacebeam.org/posts/school-for-zergs/</guid><pubDate>Fri, 04 Mar 2022 16:21:57 GMT</pubDate></item><item><title>How To Cut and Trim Video</title><link>https://spacebeam.org/posts/how-to-cut-and-trim-video/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;The following command is used to trim video in FFmpeg. The stream copy enables to trim video without re-encoding and meanwhile keeps original quality for the output video.&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal"&gt;`
.. code:: bash
ffmpeg &lt;span class="pre"&gt;-i&lt;/span&gt; input.mp4 &lt;span class="pre"&gt;-ss&lt;/span&gt; 00:01:23 &lt;span class="pre"&gt;-to&lt;/span&gt; 00:04:20 &lt;span class="pre"&gt;-c&lt;/span&gt; copy output.mp4
`&lt;/code&gt;&lt;/p&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: ERROR/3 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 8)&lt;/p&gt;
&lt;p&gt;Content block expected for the "code" directive; none found.&lt;/p&gt;
&lt;pre class="literal-block"&gt;.. code:: bash&lt;/pre&gt;
&lt;/aside&gt;
&lt;aside class="system-message"&gt;
&lt;p class="system-message-title"&gt;System Message: WARNING/2 (&lt;span class="docutils literal"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;, line 9)&lt;/p&gt;
&lt;p&gt;Explicit markup ends without a blank line; unexpected unindent.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;ffmpeg -i input.mp4 -ss 00:01:23 -to 00:04:20 -c copy output.mp4&lt;/p&gt;
&lt;p&gt;-c copy trim via stream copy, which is fast and will not re-encode video.&lt;/p&gt;</description><category>ffmpeg</category><category>guide</category><guid>https://spacebeam.org/posts/how-to-cut-and-trim-video/</guid><pubDate>Thu, 04 Mar 2021 01:02:09 GMT</pubDate></item><item><title>How to divide drones for mining minerals</title><link>https://spacebeam.org/posts/how-to-divide-drones/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;Let's learn to order our workers to gather some resources closest to them!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/TorchCraft/TorchCraft/"&gt;TorchCraft&lt;/a&gt; is a &lt;a href="https://bwapi.github.io/"&gt;BWAPI&lt;/a&gt; module that sends StarCraft: Brood War data out over a &lt;a href="https://zeromq.org"&gt;ZMQ&lt;/a&gt; connection.
This lets you parse game data and interact with the Brood War API from anywhere.&lt;/p&gt;
&lt;p&gt;This tutorial will walk you through start the game for the first time after &lt;a href="https://spacebeam.org/2020/07/09/how-to-install-torchcraft-and-set-up-a-programming-environment-on-linux/"&gt;installing the environment&lt;/a&gt;,
we are going to dive into TorchCraft's Python API and its provided &lt;a href="https://github.com/TorchCraft/TorchCraft/blob/master/examples/py/example.py"&gt;example.py&lt;/a&gt;, learn to train a SCV, gather minerals, build a refinery and start harvesting-gas!&lt;/p&gt;
&lt;p&gt;Let's start the game and learn a bit more about TorchCraft a general overview can be found in:&lt;/p&gt;
&lt;p&gt;Synnaeve, G., Nardelli, N., Auvolat, A., Chintala, S., Lacroix, T., Lin, Z.,
Richoux, F. and Usunier, N., 2016. &lt;em&gt;TorchCraft: a Library for Machine Learning Research
on Real-Time Strategy Games&lt;/em&gt; - &lt;a href="https://arxiv.org/abs/1611.00625"&gt;arXiv:1611.00625&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Step 0 - Build a &lt;code&gt;launcher.py&lt;/code&gt; script&lt;/h3&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;cd /opt/StarCraft
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;wine bwheadless.exe -e /opt/StarCraft/StarCraft.exe\
 -l /opt/StarCraft/bwapi-data/BWAPI.dll --host\
 --name Blueberry --game Blueberry --race T\
 --map maps/TorchUp/\(4\)FightingSpirit1.3.scx&amp;amp;\
wine Chaoslauncher/Chaoslauncher.exe
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is what we are actually executing, let's build a &lt;code&gt;launcher.py&lt;/code&gt; script.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="c1"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="c1"&gt;# Run bwheadless.exe and Chaoslauncher.exe from here!&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'host a game with bwheadless'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-p'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--path'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'/opt/StarCraft/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'StarCraft path'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--bot'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Blueberry'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-r'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--race'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Terran'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-m'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'--map'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'\(4\)FightingSpirit1.3.scx'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;span class="s1"&gt;wine bwheadless.exe -e &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;StarCraft.exe&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt; -l &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;bwapi-data/BWAPI.dll --host&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt; --name &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt; --game &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt; --race &lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt; --map maps/TorchUp/&lt;/span&gt;&lt;span class="si"&gt;{3}&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s1"&gt;wine Chaoslauncher/Chaoslauncher.exe&lt;/span&gt;
&lt;span class="s1"&gt;'''&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;race&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Start the original example again and run &lt;code&gt;launcher.py&lt;/code&gt; to see what gives?&lt;/p&gt;
&lt;h4&gt;Run the original &lt;code&gt;example.py&lt;/code&gt;&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ python3 /usr/src/TorchCraft/examples/py/example.py -t &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Run the &lt;code&gt;launcher.py&lt;/code&gt; script&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ python3 /usr/src/starcraft-sif/examples/launcher.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If everything works as expected, you will see &lt;code&gt;Chaoslauncher&lt;/code&gt;, the first time it will ask for the location of &lt;code&gt;StarCraft.exe&lt;/code&gt;, you will find it on &lt;code&gt;/opt/StarCraft/&lt;/code&gt; confirm and it will ask probably to restart &lt;code&gt;Chaoslauncher.exe&lt;/code&gt;, kill the current session with &lt;code&gt;Control-C&lt;/code&gt; in the terminal where you start &lt;code&gt;launcher.py&lt;/code&gt; and run it again.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ python3 /usr/src/starcraft-sif/examples/launcher.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;{% img [class name(s)] /images/1.png %}&lt;/p&gt;
&lt;p&gt;Now with Chaoslauncher ready, enable the &lt;code&gt;BWAPI 4.2.0 [RELEASE]&lt;/code&gt; and and &lt;code&gt;W-MODE&lt;/code&gt; plugins and click on &lt;code&gt;Start&lt;/code&gt; hopefully that will launch the game on your new environment, check &lt;code&gt;Multiplayer -&amp;gt; Local PC&lt;/code&gt; and confirm that you see &lt;code&gt;Blueberry&lt;/code&gt; waiting in the lobby.&lt;/p&gt;
&lt;p&gt;{%img [class name(s)] /images/2.png %}&lt;/p&gt;
&lt;p&gt;{%img [class name(s)] /images/3.png %}&lt;/p&gt;
&lt;h3&gt;Step 1 - What is TorchCraft again?&lt;/h3&gt;
&lt;p&gt;{%img [class name(s)] /images/4.png %}&lt;/p&gt;
&lt;p&gt;TorchCraft is a library that enables machine learning research in the real-time strategy game of StarCraft: Brood War, by making easier to control the game from a machine learning framework, here &lt;a href="https://pytorch.org"&gt;PyTorch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;TorchCraft advocate to have not only the pixels as input and keyboard/mouse for commands, but also a structured representation of the game state. This makes it easier to try a broad variety of models.&lt;/p&gt;
&lt;p&gt;StarCraft: Brood War is a highly competitive game with professional players, which provides interesting datasets, human feedback, and a good benchmark of what is possible to achieve within the game.&lt;/p&gt;
&lt;h4&gt;BWAPI&lt;/h4&gt;
&lt;p&gt;BWAPI is a programming interface written in C++ which allows users to read data and send game commands to a StarCraft: Brood War game client. BWAPI contains all functionality necessary for the creation of a competitive bot. Examples of BWAPI functionality are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Perform unit actions, i.e: &lt;code&gt;Attack&lt;/code&gt;, &lt;code&gt;Move&lt;/code&gt;, &lt;code&gt;Build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Obtain current data about any visible unit, such as: &lt;code&gt;Position&lt;/code&gt;, &lt;code&gt;HP&lt;/code&gt;, &lt;code&gt;Energy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Obtain offline data about any unit type, such as: &lt;code&gt;MaxSpeed&lt;/code&gt;, &lt;code&gt;Damage&lt;/code&gt;, &lt;code&gt;MaxHP&lt;/code&gt;, &lt;code&gt;Size&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Programs written with BWAPI alone are usually compiled into a Windows dynamically linked library (DLL) which is injected into the game. BWAPI allows the user to perform any of the aboce functionality while the game is running, after each logic frame update within the game's software.&lt;/p&gt;
&lt;p&gt;After each logic frame, BWAPI interrupts the StarCraft process and allows the user to read game data and issue commands, which are stored in a queue to be executed during the game's next logic frame.&lt;/p&gt;
&lt;h4&gt;TorchCraft Design&lt;/h4&gt;
&lt;p&gt;TorchCraft connects Torch to BWAPI low level interface to StarCraft: Brood War. TorchCraft's approach is to dynamically inject a piece of code in the game engine that will be a server. This server sends the state of the game to a client, and receives commands to send to the game.&lt;/p&gt;
&lt;p&gt;The two modules are entirely asynchronous. TorchCraft execution model inject a DLL that provides the game interface to the bots, and one that includes all the instructions to communicate with the external client, interpreted by the game as player (or bot AI).&lt;/p&gt;
&lt;p&gt;The server starts at the beginning of the match and stops when that ends.&lt;/p&gt;
&lt;p&gt;TorchCraft is seen by the AI programmer as a library that provides: &lt;code&gt;connect()&lt;/code&gt;, &lt;code&gt;receive()&lt;/code&gt; to get the state, &lt;code&gt;send(commands)&lt;/code&gt;, and some helper functions about specifics of StarCraft's rules and state representation.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- main game engine loop:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- it acts as the server for our TorchCraft bot client to `connect`, `receive` and `send(commands)`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receive_player_actions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compute_dynamics&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;-- our injected code:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;torchcraft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_state&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;torchcraft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;receive_actions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A simplified client/server model that runs in the game engine (server, on top) and the machine learning framework (client, on the bottom).&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- ilustrates a TorchCraft bot using the Lua client to `connect`, `receive` and `send(commands)`&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;-- it acts as the machine learning client where we can integrate Torch7 to return in-game actions&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'torchcraft'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;featurize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;game_ended&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;featurize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;tocommand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;TorchCraft also provides an efficient way to store game frames data from past games so that existing replays can be re-examined.&lt;/p&gt;
&lt;p&gt;TorchCraft is a library that enables machine learning reserch on real game data by interfacing PyTorch with StarCraft: Brood War.&lt;/p&gt;
&lt;h3&gt;Step 2 - Analyzing TorchCraft &lt;code&gt;example.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;What is TorchCraft's &lt;a href="https://github.com/TorchCraft/TorchCraft/blob/master/examples/py/example.py"&gt;example.py&lt;/a&gt; actually doing?&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torchcraft&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tc&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;torchcraft.Constants&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tcc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get closest function, very self explanatory!&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;:::&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;get_closest&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;dist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;float&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'inf'&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;None&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;units&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;dist&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;dist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;d&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;TorchCraft Python API client initial setup&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;:::&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;client&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tc&lt;/span&gt;.&lt;span class="nv"&gt;Client&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;client&lt;/span&gt;.&lt;span class="k"&gt;connect&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;hostname&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;port&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Initial&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;setup&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;client&lt;/span&gt;.&lt;span class="k"&gt;send&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;[&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;set_speed&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;],&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;[&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;set_gui&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;],&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;[&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;set_cmd_optim&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;],&lt;span class="w"&gt;&lt;/span&gt;
]&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Plays simple micro battles with an attack closest heuristic&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;{%img [class name(s)] /images/5.png %}&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;:::&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;game_ended&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;client&lt;/span&gt;.&lt;span class="nv"&gt;recv&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;[]&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;game_ended&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;units&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;units&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;]&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;enemy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;units&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;units&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;get_closest&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;x&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;y&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;enemy&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;None&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command_unit_protected&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Attack_Unit&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;print&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Sending actions: {}"&lt;/span&gt;.&lt;span class="nv"&gt;format&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;&lt;span class="ss"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;client&lt;/span&gt;.&lt;span class="k"&gt;send&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;client&lt;/span&gt;.&lt;span class="nv"&gt;close&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The TorchCraft API is a layer of abstraction on top of BWAPI, we don't interact with BWAPI directly, this is the biggest difference if compared with common C++ or Java bots.&lt;/p&gt;
&lt;h3&gt;Step 3 - Minerals and Vespene Gas&lt;/h3&gt;
&lt;p&gt;Workers mine 8 minerals per trip. Minerals are the more important of the two physical resources, for all units produces from buildings or larvae require at least some minerals to be produced, while more basic units and structures do not require &lt;code&gt;Vespene Gas&lt;/code&gt;. In addition, gas harvesting is possible only by building a gas-extracting structure on a geyser (&lt;code&gt;Extractor&lt;/code&gt; for &lt;code&gt;Zerg&lt;/code&gt;, &lt;code&gt;Refinery&lt;/code&gt; for &lt;code&gt;Terran&lt;/code&gt; and &lt;code&gt;Assimilator&lt;/code&gt; for &lt;code&gt;Protoss&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;{%img [class name(s)] /images/6.png %}&lt;/p&gt;
&lt;h4&gt;Run &lt;code&gt;gathering.py&lt;/code&gt; example&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ python3 /usr/src/starcraft-sif/examples/gathering.py
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Run &lt;code&gt;launcher.py&lt;/code&gt; script&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;$ python3 /usr/src/starcraft-sif/examples/launcher.py
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Train a SCV&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;:::&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;units&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;isbuilding&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tc&lt;/span&gt;.&lt;span class="nv"&gt;Constants&lt;/span&gt;.&lt;span class="nv"&gt;unittypes&lt;/span&gt;.&lt;span class="nv"&gt;_dict&lt;/span&gt;[&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;type&lt;/span&gt;]\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Terran_Command_Center'&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;producing&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;frame&lt;/span&gt;.&lt;span class="nv"&gt;resources&lt;/span&gt;[&lt;span class="nv"&gt;bot&lt;/span&gt;[&lt;span class="s1"&gt;'id'&lt;/span&gt;]].&lt;span class="nv"&gt;ore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;frame&lt;/span&gt;.&lt;span class="nv"&gt;resources&lt;/span&gt;[&lt;span class="nv"&gt;bot&lt;/span&gt;[&lt;span class="s1"&gt;'id'&lt;/span&gt;]].&lt;span class="nv"&gt;used_psi&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;frame&lt;/span&gt;.&lt;span class="nv"&gt;resources&lt;/span&gt;[&lt;span class="nv"&gt;bot&lt;/span&gt;[&lt;span class="s1"&gt;'id'&lt;/span&gt;]].&lt;span class="nv"&gt;total_psi&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Target&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;are&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;all&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command_unit_protected&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Train&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;tc&lt;/span&gt;.&lt;span class="nv"&gt;Constants&lt;/span&gt;.&lt;span class="nv"&gt;unittypes&lt;/span&gt;.&lt;span class="nv"&gt;Terran_SCV&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;#&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;train&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;MUST&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;input&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"extra"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;field&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;producing&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Gathering Minerals&lt;/h4&gt;
&lt;p&gt;if all went well, the workers should now start gathering the mineral patches closest to them!&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;:::&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;gather&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command2order&lt;/span&gt;[&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Gather&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command2order&lt;/span&gt;[&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Build&lt;/span&gt;]&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;right_click_position&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command2order&lt;/span&gt;[&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Right_Click_Position&lt;/span&gt;]&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;orders&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;.&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gather&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;.&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;\\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;order&lt;/span&gt;.&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;right_click_position&lt;/span&gt;\&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;building_refinery&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;get_closest&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;x&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;y&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;neutral&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;None&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command_unit_protected&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Right_Click_Unit&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;target&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Don't expect an optimal spread of workers, but that is left as an exercise.&lt;/p&gt;
&lt;h4&gt;Build a Refinery&lt;/h4&gt;
&lt;p&gt;We Require More Vespene Gas&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;:::&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nv"&gt;vespene&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'Resource_Vespene_Geyser'&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;isworker&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;type&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;workers&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;state&lt;/span&gt;.&lt;span class="nv"&gt;frame&lt;/span&gt;.&lt;span class="nv"&gt;resources&lt;/span&gt;[&lt;span class="nv"&gt;bot&lt;/span&gt;[&lt;span class="s1"&gt;'id'&lt;/span&gt;]].&lt;span class="nv"&gt;ore&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;building_refinery&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;nu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;neutral&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unittypes&lt;/span&gt;.&lt;span class="nv"&gt;_dict&lt;/span&gt;[&lt;span class="nv"&gt;nu&lt;/span&gt;.&lt;span class="nv"&gt;type&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;vespene&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command_unit&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Build&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;nu&lt;/span&gt;.&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;nu&lt;/span&gt;.&lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                    &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unittypes&lt;/span&gt;.&lt;span class="nv"&gt;Terran_Refinery&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;building_refinery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;True&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Gas harvesting&lt;/h4&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;:::&lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;building_refinery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;refinery&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command_unit_protected&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Right_Click_Unit&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;refinery&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;elif&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;refinery&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;[&lt;span class="mi"&gt;1&lt;/span&gt;]&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;\&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="nv"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;len&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;:&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;gas_harvesting&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nv"&gt;actions&lt;/span&gt;.&lt;span class="nv"&gt;append&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;[&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;command_unit_protected&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;unit&lt;/span&gt;.&lt;span class="nv"&gt;id&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;tcc&lt;/span&gt;.&lt;span class="nv"&gt;unitcommandtypes&lt;/span&gt;.&lt;span class="nv"&gt;Right_Click_Unit&lt;/span&gt;,&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="nv"&gt;refinery&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;]&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Further Reading&lt;/h3&gt;
&lt;p&gt;Here is a link to the complete &lt;a href="https://github.com/spacebeam/starcraft-sif/blob/master/examples/gathering.py"&gt;gathering.py&lt;/a&gt; script if you are just curious,
Next we will &lt;a href="https://spacebeam.org/2020/07/11/8-supply-11-gas-12-rax-14-scout/"&gt;train different units&lt;/a&gt; to improve our Terran skills!&lt;/p&gt;</description><category>guide</category><guid>https://spacebeam.org/posts/how-to-divide-drones/</guid><pubDate>Wed, 29 Jul 2020 01:22:30 GMT</pubDate></item><item><title>Build a Wall &amp; Lings Will Fall</title><link>https://spacebeam.org/posts/howto-build/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;Now that we are training our workers, eventually we'll be running out of supply.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Workers are often weak in fights compared to other units.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Players gather resources to build units and defeat their opponents. To that end, they often have worker units
(and extraction structures) that can gather resources needed to build workers, buildings, other units and research upgrades.&lt;/p&gt;
&lt;p&gt;Buldings and research define technology trees (directed acyclic graphs) and each state of a tech tree allow for the production of different unit types 
and the training of new unit abilities.&lt;/p&gt;
&lt;p&gt;An opening denotes the same thing as in Chess: an early game plan for which the player has to make choices.&lt;/p&gt;
&lt;p&gt;That is the case in Chess because one can move only one piece at a time (each turn), and in StarCraft because,
during the early game phase, one is economically limited and has to choose which tech paths to pursue.&lt;/p&gt;
&lt;p&gt;Available resources constrain the technology advancement and the number of units one can produce. As producing buildings
and units also take time, the arbitrage between investing in the economy, in technological advancements, and in units production
is the crux of the strategy during the whole game.&lt;/p&gt;
&lt;h3&gt;opening&lt;/h3&gt;
&lt;p&gt;In StarCraft an opening refer to the initial moves of a game. The term can refer to the initial moves by either side, but an opening by Zerg may also be known as &lt;em&gt;defense&lt;/em&gt;. 
There are dozens of different openings, and hundreds of variants. These vary widely in character from quiet positional play to wild tactical play.&lt;/p&gt;
&lt;p&gt;In addition to referring to specific move sequences, the opening is the first phase of a game, the other phases being the middlegame and the endgame.&lt;/p&gt;
&lt;p&gt;Opening moves that are considered standard are referred to as "book moves". Reference works often present move sequnces in simple algebraic notation, opening trees or theory tables. When a game begins to deviate deom known, opening theory, the players are said to be "out of the book".&lt;/p&gt;
&lt;p&gt;Professional players spend yers studying openings, and continue doing so throughout their careers, as opening theory continues to evolve.&lt;/p&gt;
&lt;p&gt;The study of openings can become unbalanced if it is to the exclusion of tactical training and middlegame and endgame strategy.&lt;/p&gt;</description><category>guide</category><guid>https://spacebeam.org/posts/howto-build/</guid><pubDate>Tue, 14 Jul 2020 00:37:04 GMT</pubDate></item><item><title>The Seed Mechanism</title><link>https://spacebeam.org/posts/blackboard/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;We are now ready to move up to a complete connection information distribution mechanism containing a number of programable modules along with the structure to program them.&lt;/p&gt;
&lt;p&gt;The seed mechanism consist of a central knowledge store, a set of programmable modules, and connections between them.&lt;/p&gt;
&lt;p&gt;The structure is set in a way that all of the connection information that is specific to recognition
of zergs is stored in the central knowledge store.&lt;/p&gt;
&lt;p&gt;Incoming lines from the programmable module allow information in each module to access the central knowledge,
and output lines from the central knowledge store to the programmable modules allow connection activation information
to be distributed back to the modules.&lt;/p&gt;
&lt;p&gt;The two programmable modules are &lt;em&gt;just copies&lt;/em&gt; of the module. It is assumed that lower-level mechanisms, outside
of the model itself, are responsible for aligning inputs with the two modules, so that shown two units are presented,
the zergling activates appropriate programmable zergling units in the module, and the hydralisk activates
appropriate programmable hydralisk units in the right module.&lt;/p&gt;
&lt;p&gt;In summary, the mechanism consists of &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(a) the programmable modules&lt;/li&gt;
&lt;li&gt;(b) the central knowledge store&lt;/li&gt;
&lt;li&gt;(c) converging inputs to the central knowledge store from the programmable modules&lt;/li&gt;
&lt;li&gt;(d) diverging outputs from the central knowledge store back to the programmable modules&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Benefits&lt;/h2&gt;
&lt;p&gt;Connection information distribution allow us to instruct parallel processing structures from outside the network
making their behavior contingent on instructions originating elsewhere in the network.&lt;/p&gt;
&lt;p&gt;This means, that the way a network responds to a particular input can be made contingent on the state of some other
network in the system, thereby greatly increasing the flexibility of parallel processing mechanisms.&lt;/p&gt;
&lt;p&gt;Perhaps the most general way of stating the benefit of connection information distribution is to note that is in a way,
analogous to the invention of the stored program!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Using connection information distribution, we can create local copies of relevant portions of the contents of a central
knowledge store. These copies then serve as the basis for interactive processing amount the conceptual entities they
program local hardware units to represent.&lt;/p&gt;
&lt;p&gt;With this mechanism, parallel distributed processing models can now be said to be able to create multiple
&lt;em&gt;instances&lt;/em&gt; of the same &lt;em&gt;schema&lt;/em&gt;, bound appropriately to the correct local variables, though subject to just
the same kind of crashes and errors human programmers seem to make.&lt;/p&gt;
&lt;p&gt;We have not really done anything more than show how existing tools in the arsenal of parallel distributed processing
mechanisms can be used to create local copies of networks.&lt;/p&gt;</description><category>computer</category><category>guide</category><category>nonsense</category><guid>https://spacebeam.org/posts/blackboard/</guid><pubDate>Mon, 20 Apr 2020 14:04:36 GMT</pubDate></item><item><title>The education of the architect</title><link>https://spacebeam.org/posts/architect/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;The architect should be equipped with knowledge of many branches of study and varied kinds of learning, for it is by his judgement that all work done by the other arts is put to test.&lt;/p&gt;
&lt;p&gt;Knowledge is the child of practice and theory. Practice is the continuous and regular exercise of employment where manual work is done with any necessary material according to the design of a drawing. Theory, on the other hand, is the ability to demonstrate and explain the productions of dexterity on the principles of proportion.&lt;/p&gt;
&lt;p&gt;It follows, therefore, that architects who have aimed at acquiring manual skill without scholarship have never been able to reach a position of authority to correspond to their pains, while those who relied only upon theories and scholarship were obviously hunting the shadow, not the substance. But those who have a thorough knowledge of both, like men armed at all points, have the sooner attained their object and carried authority with them.&lt;/p&gt;
&lt;p&gt;In all matters, but particularly in architecture, there are these two points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;the thing signified, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and that which gives it its significance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That which is signified is the subject of which we may be speaking; and that which gives significance is a demonstrations on scientific principles.&lt;/p&gt;
&lt;p&gt;The reasons for all this are as follows. An architect must have a knowledge of drawing so that he can readily make sketches to show the appearance of the work which he proposes. Geometry, also, is of much assistance in architecture and in particular it teaches us the use of the rule and compasses, by which especially we acquire readiness in making plans for buildings in their grounds, and righly apply the square, the level, and the plummet. By means of optics, again, the light in buildings can be drawn from fixed quarters of the sky.&lt;/p&gt;
&lt;p&gt;It is true that by arithmetic that the total cost of buildings is calculated and measurements are computed, but difficult questions involving symmetry are solved by means of geometrical theories and methods.&lt;/p&gt;</description><category>computer</category><category>guide</category><category>nonsense</category><guid>https://spacebeam.org/posts/architect/</guid><pubDate>Wed, 23 Oct 2019 14:04:36 GMT</pubDate></item><item><title>Organizatinal behavior</title><link>https://spacebeam.org/posts/behavior/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;What is an organization? A monkey, a building, a drone: each is a concrete object and can be easily identified. One difficulty attending the study of organizations is that an organization is not as readily visible or describable.&lt;/p&gt;
&lt;p&gt;Exactly what is an organization? It is a building? A collection of machinery? A legal document containing a statement of incorporation? It is hardly likely to be any of these by itself. Rather, to describe an organization requires the consideration of a number of properties it possesses, thus gradually making clear, or at least clearer, that it is.&lt;/p&gt;
&lt;p&gt;The purposes of the organization, whether it is formal or informal, are accomplished by a collection of members whose efforts or behavior are so directed that they become coordinated and integrated in order to attain sub-goals and objectives.&lt;/p&gt;
&lt;h2&gt;Perception and behavior&lt;/h2&gt;
&lt;p&gt;All of us at some point or another have had the experience of watching another person do something or behave in a certain way, saying to ourselves, "She acts as if she thought, ... " and then filling in some supposition about the way the other person looked at things.&lt;/p&gt;
&lt;p&gt;Simple as the statement "She acts as if she thought ... " may be, it illustrates two important points.&lt;/p&gt;
&lt;p&gt;First, what the person thinks she sees may not actually exist. &lt;/p&gt;
&lt;p&gt;The second point is that people act on the basis of what they see. &lt;/p&gt;
&lt;p&gt;In understanding behavior, we must recognize that facts people do not perceive as meaningful usually will not influence their behavior, whereas the things they believe to be real, even though factually incorrect or nonexistent, will influence it.&lt;/p&gt;
&lt;p&gt;Organizations are intended to bring about integrated behavior. Similar, or at least compatible, perceptions on the part of organizational members are therefore a matter of prime consideration.&lt;/p&gt;</description><category>computer</category><category>guide</category><category>nonsense</category><guid>https://spacebeam.org/posts/behavior/</guid><pubDate>Sat, 19 Oct 2019 14:04:36 GMT</pubDate></item><item><title>Process of abstraction</title><link>https://spacebeam.org/posts/abstraction/</link><dc:creator>The Spacebeam authors</dc:creator><description>&lt;p&gt;If a system is to be stable the number of states of its control mechanism must be greater than or equal to the number of states in the system being controlled.&lt;/p&gt;
&lt;p&gt;In trying to understand what is happening around us we are faced with a fundamental problem. In approaching any situation, the system trying to understand it, does not attempt to gather all information. Instead it selects certain facts and searchers for others.&lt;/p&gt;
&lt;p&gt;This selection of some items and ignoring of others is a process of abstraction.&lt;/p&gt;
&lt;p&gt;It is the abstracting form a real or if you will empirical situation the things seemingly most important to deal with.&lt;/p&gt;
&lt;p&gt;In this process of abstraction and model building we deliberately select a few items, ignore may others, and then place the items chosen in a particular relationship to one another.&lt;/p&gt;
&lt;p&gt;In doing so we are intentionally ignoring facts or relationships that can influence the type of situation under study.&lt;/p&gt;
&lt;p&gt;The problem it to select the most meaningful elements and relationships and dropout the rest.&lt;/p&gt;
&lt;p&gt;Those who use abstraction skillfully know well that they neither have all the facts nor have considered all the relationships bearing on the outcome of what they are analysing.&lt;/p&gt;
&lt;p&gt;We do not use the abstractions from one situation in another setting without carefully examining the fit. Neither do we expect a model to handle all aspects of a situation.&lt;/p&gt;
&lt;p&gt;We shall be dealing with many abstractions and models, not with the intention of exactly mirroring the real world but with the objective of clarifying our perception of its most essential features.&lt;/p&gt;
&lt;p&gt;Abstractions and models are mechanisms for economizing both time and effort, but like any tool they must be used within their limits.&lt;/p&gt;
&lt;h2&gt;Model your goals&lt;/h2&gt;
&lt;p&gt;Taking the abstracted elements, a character with the flat tire begins to connect them into a pattern.&lt;/p&gt;
&lt;p&gt;Better yet, he weaves them into a model of the confronting situation, which we can use both to understand his plight and figure out what to do about it.&lt;/p&gt;
&lt;p&gt;The parts of this model would probably include, among other things, the flat tire, the image of the spare in the trunk, the telephone, the service station, a forthcoming business meting, etc.&lt;/p&gt;
&lt;p&gt;A second model would contain the telephone, the service station, and the repairman there.&lt;/p&gt;
&lt;p&gt;Finally, he concludes that he will call a cab and leave his wife to deal with the flat tire as best as she can.&lt;/p&gt;
&lt;p&gt;These are extraordinarily elementary models, but they serve a very practical purpose.&lt;/p&gt;
&lt;p&gt;With them the main character in our illustration can see the likely consequences of various courses of action.&lt;/p&gt;
&lt;p&gt;We can find out these things by doing them directly by actually handling the tire and observing that we get dirty, or by calling the repairmen and waiting for him and learning that it takes too long.&lt;/p&gt;
&lt;p&gt;In the age of big data; information models are good.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For any given size of data, the bigger the model, the better it generalizes, provided you regularize well.&lt;/li&gt;
&lt;li&gt;This is obviously true if your model is an ensemble of smaller models.&lt;/li&gt;
&lt;li&gt;Adding extra models to the ensemble always helps.&lt;/li&gt;
&lt;li&gt;It is a good idea to try to make the data look small by using a big model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By using the model, however, we can make some reasonable predictions about what will occur and thereby accept or reject the choices open to us.&lt;/p&gt;
&lt;p&gt;Several references have been made with the intent of this guide to provide conceptual tools for analysis. As with any other tool models, abstractions and generalizations are useful only when within their limitations.&lt;/p&gt;</description><category>guide</category><guid>https://spacebeam.org/posts/abstraction/</guid><pubDate>Sat, 19 Oct 2019 14:04:36 GMT</pubDate></item></channel></rss>